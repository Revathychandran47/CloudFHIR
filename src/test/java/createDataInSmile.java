import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import io.restassured.response.Response;
import org.apache.commons.io.FileUtils;
import java.io.File;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class createDataInSmile extends utils {
    private static String jsonTemplate = getGlobalValue("inputFiles")+"//"+getGlobalValue("resource")+"//"+getGlobalValue("resource").toLowerCase()+".json";

    public static void main(String[] args) throws Exception {
        //Get count of json to be generated by reading values having <> in template
        int count = getCount(jsonTemplate);
        for(int i = 0; i<count; i++)
        {
            //Generate patient payload
            String payloadGenerated = generateData(jsonTemplate,i);

            //Inserting generated payload into smileCDR
            Response response = insertDataIntoSmile(payloadGenerated,getGlobalValue("resource"));

            //Sample assertion
            String resourceID = getJsonPath(response, "id");
            System.out.println(getGlobalValue("resource")+" id is "+ resourceID);

            //Writing response to a file
            writeToFile(getGlobalValue("smileOutput"),"id: "+i+",json:"+response.asString());
        }
    }

    public static String generateData(String jsonTemplate, int index) throws Exception {
        String jSON = FileUtils.readFileToString(new File(jsonTemplate));
        jSON = updateJson(jSON,index);
        return jSON;
    }

    private static String updateJson(String jsonTemplate,int index){
        String match = null,key= null;
        JsonParser jsonParser = new JsonParser();
        JsonObject jsonObject = jsonParser.parse(jsonTemplate).getAsJsonObject();
        // Iterate over key-value pairs using entrySet()
        for (Map.Entry<String, JsonElement> entry : jsonObject.entrySet()) {
            String value = String.valueOf(entry.getValue());

            if (value.contains("<")) {
                Pattern pattern = Pattern.compile("<([^>]*)>");
                Matcher matcher = pattern.matcher(value);

                while (matcher.find()) {
                    match = matcher.group();
                    List<String> columnNames = getColumnNames();
                    for(String header: columnNames) {
                        if (header.equalsIgnoreCase(match)) {
                            List<String> columnValues = getValueFromCSV(match);
                            value = columnValues.get(index);
                            if (value.equalsIgnoreCase("null")) {
                                value = " ";
                            } else if (value.contains(":")) {
                                String[] val = value.split(":");
                                value=val[0];
                                if(value.equalsIgnoreCase("null")){
                                    value = " ";
                                }
                            }
                            jsonTemplate = updateJson(jsonTemplate, match, value);
                            break;
                        }
                    }
                }
            }
        }

        return jsonTemplate;
    }




}

